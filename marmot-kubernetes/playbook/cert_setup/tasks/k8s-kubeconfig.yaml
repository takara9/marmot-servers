#
# kube-proxy Kubernetes Configuration File
#
- name: check existing kube-proxy.kubeconfig
  stat:
    path: "{{ ca_kubeconfig }}/kube-proxy.kubeconfig"
  register: file_kube_proxy_kubeconfig

- name: kube-proxy Kubernetes Configuration File
  shell: |
    kubectl config set-cluster kubernetes \
      --certificate-authority=ca.pem \
      --embed-certs=true \
      --server=https://{{ KUBERNETES_PUBLIC_ADDRESS }}:6443 \
      --kubeconfig={{ ca_kubeconfig }}/kube-proxy.kubeconfig

    kubectl config set-credentials system:kube-proxy \
      --client-certificate=kube-proxy.pem \
      --client-key=kube-proxy-key.pem \
      --embed-certs=true \
      --kubeconfig={{ ca_kubeconfig }}/kube-proxy.kubeconfig

    kubectl config set-context default \
      --cluster=kubernetes \
      --user=system:kube-proxy \
      --kubeconfig={{ ca_kubeconfig }}/kube-proxy.kubeconfig

    kubectl config use-context default --kubeconfig={{ ca_kubeconfig }}/kube-proxy.kubeconfig

  args:
    chdir: "{{ ca_home2 }}"
  when: file_kube_proxy_kubeconfig.stat.exists == False

- file:
    path: "{{ ca_kubeconfig }}/kube-proxy.kubeconfig"
    mode: '0644'

#
# kube-controller-manager Kubernetes Configuration File
#
- name: check existing kube-controller-manager.kubeconfig
  stat:
    path: "{{ ca_kubeconfig }}/kube-controller-manager.kubeconfig"
  register: file_kube_controller_manager_kubeconfig

- name: kube-controller-manager Kubernetes Configuration File
  shell: |
    kubectl config set-cluster kubernetes \
      --certificate-authority=ca.pem \
      --embed-certs=true \
      --server=https://127.0.0.1:6443 \
      --kubeconfig={{ ca_kubeconfig }}/kube-controller-manager.kubeconfig

    kubectl config set-credentials system:kube-controller-manager \
      --client-certificate=kube-controller-manager.pem \
      --client-key=kube-controller-manager-key.pem \
      --embed-certs=true \
      --kubeconfig={{ ca_kubeconfig }}/kube-controller-manager.kubeconfig

    kubectl config set-context default \
      --cluster=kubernetes \
      --user=system:kube-controller-manager \
      --kubeconfig={{ ca_kubeconfig }}/kube-controller-manager.kubeconfig

    kubectl config use-context default --kubeconfig={{ ca_kubeconfig }}/kube-controller-manager.kubeconfig

  args:
    chdir: "{{ ca_home2 }}"
  when: file_kube_controller_manager_kubeconfig.stat.exists == False    



#
# kube-scheduler Kubernetes Configuration File
#
- name: check existing kube-scheduler.kubeconfig
  stat:
    path: "{{ ca_kubeconfig }}/kube-scheduler.kubeconfig"
  register: file_kube_scheduler_kubeconfig

- name: kube-scheduler Kubernetes Configuration File
  shell: |
    kubectl config set-cluster kubernetes \
      --certificate-authority=ca.pem \
      --embed-certs=true \
      --server=https://127.0.0.1:6443 \
      --kubeconfig={{ ca_kubeconfig }}/kube-scheduler.kubeconfig

    kubectl config set-credentials system:kube-scheduler \
      --client-certificate=kube-scheduler.pem \
      --client-key=kube-scheduler-key.pem \
      --embed-certs=true \
      --kubeconfig={{ ca_kubeconfig }}/kube-scheduler.kubeconfig

    kubectl config set-context default \
      --cluster=kubernetes \
      --user=system:kube-scheduler \
      --kubeconfig={{ ca_kubeconfig }}/kube-scheduler.kubeconfig

    kubectl config use-context default --kubeconfig={{ ca_kubeconfig }}/kube-scheduler.kubeconfig

  args:
    chdir: "{{ ca_home2 }}"
  when: file_kube_scheduler_kubeconfig.stat.exists == False    



#
# The admin Kubernetes Configuration File
#
- name: check existing admin.kubeconfig
  stat:
    path: "{{ ca_kubeconfig }}/admin.kubeconfig"
  register: file_admin_kubeconfig

- name: admin Kubernetes Configuration File
  shell: |
    kubectl config set-cluster kubernetes \
      --certificate-authority=ca.pem \
      --embed-certs=true \
      --server=https://{{ KUBERNETES_PUBLIC_ADDRESS }}:6443 \      
      --kubeconfig={{ ca_kubeconfig }}/admin.kubeconfig

    kubectl config set-credentials admin \
      --client-certificate=admin.pem \
      --client-key=admin-key.pem \
      --embed-certs=true \
      --kubeconfig={{ ca_kubeconfig }}/admin.kubeconfig

    kubectl config set-context default \
      --cluster=kubernetes \
      --user=admin \
      --kubeconfig={{ ca_kubeconfig }}/admin.kubeconfig

    kubectl config use-context default --kubeconfig={{ ca_kubeconfig }}/admin.kubeconfig

  args:
    chdir: "{{ ca_home2 }}"
  when: file_admin_kubeconfig.stat.exists == False        

- file:
    path: "{{ ca_kubeconfig }}/admin.kubeconfig"
    mode: '0644'

###############################################

- name: check existing admin.kubeconfig
  stat:
    path: "{{ ca_kubeconfig }}/encryption-config.yaml"
  register: file_encryption_config


- name: Encryption Config File
  shell: head -c 32 /dev/urandom | base64
  register: ENCRYPTION_KEY

- debug: msg="{{ ENCRYPTION_KEY }}"

- template:  
    src: encryption-config.yaml.j2
    dest: "{{ ca_kubeconfig }}/encryption-config.yaml"
    owner: root
    group: root
    mode: '0644'
  when: file_encryption_config.stat.exists == False


- name: chmod 0644 kube-controller-manager.kubeconfig
  file:
    path: "{{ ca_kubeconfig }}/kube-controller-manager.kubeconfig"
    owner: root
    group: root
    mode: '0644'

- name: chmod 0644 kube-scheduler.kubeconfig
  file:
    path: "{{ ca_kubeconfig }}/kube-scheduler.kubeconfig"
    owner: root
    group: root
    mode: '0644'
