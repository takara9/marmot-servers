#!/usr/bin/ruby
# coding: utf-8
# -*- mode: ruby -*-
# vi: set ft=ruby :
#
require 'mb_string'
require 'yaml'
require 'json'
require_relative 'libruby/read_yaml.rb'
require_relative 'libruby/util_defs.rb'
require_relative 'libruby/lib_scheduler.rb'

$config_yaml = "Qemukvm.yaml"  # コンフィグファイル名
$target_host = nil    # 対象ホスト名
$reuse_bootnode = nil

##
## 仮想マシンの削除
##
def destroy_vm(node)
  
  #msg = sprintf("\n\n[VM %s-%s の削除中]", node['name'],$conf['cluster_name'])
  #step_start2(msg)

  vm_name = ""
  if defined? $conf['cluster_name'] and $conf['cluster_name'].to_s.length > 0
    vm_name = sprintf("%s-%s", node['name'],$conf['cluster_name'])
  else
    vm_name = sprintf("%s", node['name'])
  end
  node['vm_name'] = vm_name

  start_tm(sprintf("仮想マシン削除中 : %s\n", vm_name))  
  
  vm_host = ""
  ret,ret_host = hvm_vm_destroy(vm_name)
  if ret.nil?
    printf("VMが存在しない\n")
    finish_tm(1)
    return
  else
    if ret == true
      #finish_tm(0)
      vm_host = ret_host
    end
  end

  hvm = ""

  # libvirtd接続先作成
  if vm_host != `hostname`.strip
    hvm = sprintf("--connect=qemu+tls://%s/system", vm_host)
  end
  
  loop do
    cmd = sprintf("virsh %s domstate %s", hvm, vm_name)
    #puts cmd
    value = %x( #{cmd} )
    if value.start_with?("shut off") or $?.exitstatus == 1
      break
    else
      cmd = sprintf("virsh %s destroy %s", hvm, vm_name)      
      #puts cmd
      %x( #{cmd} )
    end
    sleep 3
  end
  cmd = sprintf("virsh %s undefine %s --remove-all-storage", hvm, vm_name)
  #puts cmd
  %x( #{cmd} )
  retc = $?.exitstatus
  if retc == 0
    finish_tm(0)
    return 0
  end

  #step_end(0)
  #printf("削除成功\n")
end

##
## メイン処理
##
if __FILE__ == $0

  #printf("*\n")
  #printf("**********************************\n")
  #printf("*\n")
  #printf("*   仮想マシン群の削除を開始\n")
  #printf("*\n")
  #printf("**********************************\n")  
  
  ## コマンド引数の取得
  arg_state = nil
  ARGV.each_with_index do |arg, i|
    if arg_state == nil
      arg_state = arg
      if arg_state == "-r"
        $reuse_bootnode = true
      end
    else
      if arg_state == "-f"
        $config_yaml = arg
      end
      if arg_state == "-n"
        $target_host = arg
      end
      arg_state = nil
    end
  end

  ##
  ##　Hyperviser管理
  ##
  #hvm = hvm_connect()
  
  ## Vagarntの仮想サーバースペックを作成
  ## 及び、メモリ編集に取り込み
  #printf("\n\n*** 仮想サーバーの削除 ***\n\n")
  #printf("ファイル名: %s\n",$config_yaml)
  #step_start("コンフィグファイルの読み取り")
  vm_config = read_yaml_config($config_yaml)
  #step_end( vm_config.length > 0 ? 0 : 1 )

  $vm_config_array.each do |val|
    node = eval(val)
    if $target_host.nil?
      if $reuse_bootnode == true
        if node['name'].start_with?("bootnode")
          puts "スキップ ", node['name']
        else
          destroy_vm(node)
        end
      else
        destroy_vm(node)
      end
    else
      if $target_host == node['name']
        destroy_vm(node)
      end
    end
  end # END OF NODE

  #printf("**********************************\n")
  #printf("*\n")
  #printf("*   仮想マシン群の削除を正常終了\n")  
  #printf("*\n")
  #printf("**********************************\n")
  
end
