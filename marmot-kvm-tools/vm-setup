#!/usr/bin/ruby
# coding: utf-8
# -*- mode: ruby -*-
# vi: set ft=ruby :
#
require 'mb_string'
require 'yaml'
require 'json'
require_relative 'libruby/read_yaml.rb'
require_relative 'libruby/util_defs.rb'

$config_yaml = "Qemukvm.yaml"  # コンフィグファイル名
$target_host = nil   # 対象ホスト名

$base = File.basename(Dir.getwd)

##
## GitクローンとLinux設定の反映
##
def setup_vm(node)

  #msg = sprintf("\n\nVM %s setup in progress\n", node)
  #step_start(msg)

  # 削除
  cmd = sprintf("ssh -i __work/id_rsa ubuntu@%s -o 'StrictHostKeyChecking no' \"rm -fr %s\"", node['private_ip'], $base)
  #puts cmd
  value = %x( #{cmd} )
  #puts value

  
  # scp 
  cmd = sprintf("scp  -o 'StrictHostKeyChecking no' -i __work/id_rsa -r %s ubuntu@%s:", "../" + $base, node['private_ip'])
  #puts cmd
  value = %x( #{cmd} )
  if $?.exitstatus == 0
  #  printf("scp successfuly complete\n\n")
  else
    printf("scp failed\n\n")    
    !exit
  end
  
  # bundler for ruby
  cmd = sprintf("ssh -i __work/id_rsa ubuntu@%s -o 'StrictHostKeyChecking no' \"cd %s && sudo bundler\"", node['private_ip'], $base)

  puts cmd
  value = %x( #{cmd} )
  #puts value

  
  # ansible 
  cmd = sprintf("ssh -i __work/id_rsa ubuntu@%s -o 'StrictHostKeyChecking no' \"cd %s && sudo ansible-playbook -i hosts_kvm  -l %s playbook/setup_linux.yaml\"", node['private_ip'], $base, node['name'])
  puts cmd
  value = %x( #{cmd} )
  if $?.exitstatus == 0
  #  printf("ssh successfuly complete\n\n")
  else
    printf("ssh failed\n\n")    
    !exit
  end
  
  #step_end(0)
end

##
##  Bootnodeの設定を他ノードへ展開する
##
def copy_config_from_bootnode_to_others()  

  bootnode_ip = nil
  $vm_config_array.each do |val|
    x = eval(val)
    if x['name'] == "bootnode"
      bootnode_ip = x['private_ip']
    end
  end
  
  $vm_config_array.each do |val|
    x = eval(val)
    if x['name'] != "bootnode"
      #printf("==== %s ====\n",x['name'])
      cmd = sprintf("ssh -i __work/id_rsa ubuntu@%s -o 'StrictHostKeyChecking no' \"scp -r %s %s:\"", bootnode_ip, $base, x['name'])
      #puts cmd
      value = %x( #{cmd} )
      #puts value
    end
  end
  
end


##
## メイン処理
##
if __FILE__ == $0

  #printf("\n")
  #printf("**********************************\n")  
  #printf("*\n")
  #printf("*   仮想マシン群の設定を開始\n") 
  #printf("*\n")
  #printf("**********************************\n")    

  ## コマンド引数の取得
  arg_state = nil
  ARGV.each_with_index do |arg, i|
    if arg_state == nil
      arg_state = arg
    else
      if arg_state == "-f"
        $config_yaml = arg
      end
      if arg_state == "-n"
        $target_host = arg
      end
      arg_state = nil
    end
  end

  ##
  ## Vagarntの仮想サーバースペックを作成
  ## 及び、メモリ編集に取り込み
  ##
  #printf("ファイル名: %s\n",$config_yaml)
  #step_start("コンフィグファイルの読み取り")
  vm_config = read_yaml_config($config_yaml)
  #step_end( vm_config.length > 0 ? 0 : 1 )

  ##
  ## コンフィグに従って仮想マシンを設定
  ##
  $vm_config_array.each do |val|
    node = eval(val)

    ## 対象ノードの指定が無い場合
    if $target_host.nil?
      if node['name'].start_with?("bootnode")
        ## bootnodeでコンフィグ作成
        setup_vm(node)
        ## 構成結果を他ノードへコピー
        copy_config_from_bootnode_to_others()
        ## 一斉にAnsible Playbook を適用
        cmd = sprintf("ssh -i __work/id_rsa ubuntu@%s -o 'StrictHostKeyChecking no' \"cd %s && sudo ansible-playbook -i hosts_kvm  playbook/setup_linux.yaml\"", node['private_ip'],$base)
        puts cmd
        %x( #{cmd} )
      end
    else
      ## 対象ノードが指定された場合
      if $target_host == node['name']
        setup_vm(node)
        ## 対象ノード限定でAnsible Playbook を適用
        cmd = sprintf("ssh -i __work/id_rsa ubuntu@%s -o 'StrictHostKeyChecking no' \"cd %s && sudo ansible-playbook -i hosts_kvm -l %s playbook/setup_linux.yaml\"", node['private_ip'], $base, node['name'])
        puts cmd
        %x( #{cmd} )
      end
    end
  end # END OF NODE
  #printf("**********************************\n")  
  #printf("*\n")
  #printf("*   仮想マシン群の設定を終了\n") 
  #printf("*\n")
  #printf("**********************************\n")    
end # END OF MAIN
